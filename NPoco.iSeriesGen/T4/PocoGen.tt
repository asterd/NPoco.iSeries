<#@ template   debug="false" hostspecific="true" language="C#" #>
<#@ assembly   name        = "Microsoft.CSharp"             #>
<#@ assembly   name        = "System.Core"                  #>
<#@ assembly   name        = "System.Data"                  #>
<#@ assembly   name        ="$(SolutionDir)NPoco\bin\Debug\NPoco.dll" #>
<#@ assembly   name        ="$(SolutionDir)NPoco.iSeriesGen\bin\Debug\NPoco.iSeriesGen.dll" #>
<#@ import     namespace   = "System"                       #>
<#@ import     namespace   = "System.Collections.Generic"   #> 
<#@ import     namespace   = "System.Linq"                  #>
<#@ import     namespace   = "NPoco"                        #> 
<#@ import     namespace   = "NPoco.iSeriesGen.Generator"   #>
<#@ parameter  name        = "ConfigObject" type="NPoco.iSeriesGen.Generator.TemplateConfig" #>
<#  
	// System.Diagnostics.Debugger.Launch();
	var namespaceName    = ConfigObject.NameSpace;
	var tableSchema      = ConfigObject.TableSchema;  
	var tableName        = ConfigObject.TableName; 
    var tableType        = ConfigObject.GetTableTypeName();
    var fmtTableName     = ConfigObject.GetFmtTableName();
	bool isSqlTable      = ConfigObject.IsSqlSchema; 


	IDatabase db = new Database(ConfigObject.DatabaseConnectionURL, ConfigObject.DatabaseProvider);
	List<PocoTableInfo> tableColumnData;

	if (isSqlTable)
	{
		IEnumerable<PocoTableInfo> data =
			db.Query<PocoTableInfo>(String.Format(GenConstants.SQLTableInfoQuery, tableSchema, tableName), null);
		tableColumnData = data.ToList();
	}
	else
	{
		IEnumerable<PocoTableInfo> data =
			db.Query<PocoTableInfo>(String.Format(GenConstants.NativeTableInfoQuery, tableSchema, tableName), null);
		tableColumnData = data.ToList();
	}
#>
using NPoco; 
using System;
using System.Collections.Generic;

namespace <#=namespaceName #>
{

    #region <#=fmtTableName#> POCO definition

	[TableName("<#=tableSchema #>.<#=tableName #>")]
<# 
foreach(PocoTableInfo pti in tableColumnData) {
	if (pti.IsPrimaryKeyColumn()) { 
#>
	[PrimaryKey("<#=pti.ColumnName#>")] 
<#	
    }
} 
#> 
	public class <#=tableType#>
	{
<#	
foreach(PocoTableInfo pti in tableColumnData) { #>
		[Column("<#=pti.ColumnName#>")]
		public <#=GenUtils.ToCsDataType(pti.DataType)#> <#=GenUtils.ToTitleCase(pti.ColumnName)#> { get; set; }
<#	
} 
#>	}

    #endregion <#=fmtTableName#> POCO definition

    #region <#=fmtTableName#> CRUD Manager

    public class <#=fmtTableName#>CRUD
    {
        private readonly IDatabase _database;

        public <#=fmtTableName#>CRUD(IDatabase database)
        {
            _database = database;
        }

        /// <summary>
        /// Select *
        /// </summary>
        /// <returns></returns>
        public List<<#=tableType#>> SelectAll()
        {
            return Select("", null);
        }

        /// <summary>
        /// Select items with condition
        /// </summary>
        /// <param name="condition"></param>
        /// <param name="parameters"></param>
        /// <returns></returns>
        public List<<#=tableType#>> Select(string condition, params object[] parameters)
        {
            if (String.IsNullOrEmpty(condition)) 
                return _database.Fetch<<#=tableType#>>();
            return _database.Fetch<<#=tableType#>>(condition, parameters);
        }

        /// <summary>
        /// Insert new item inside database table
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public object Insert(<#=tableType#> item)
        {
            return _database.Insert(item);
        }

        /// <summary>
        /// Insert new item inside database table
        /// </summary>
        /// <param name="item"></param>
        /// <returns></returns>
        public int Update(<#=tableType#> item)
        {
            return _database.Update(item);
        }
    }

    #endregion <#=fmtTableName#> CRUD Manager
}
